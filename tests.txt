# test
include Enumerable
array1 = [1, 2, 3, 4, 5]
array2 = [1, 1, 2, 2, 2]
testproc = Proc.new { |x| x * x }
str = "xyz"

#=begin
# my_each
print "my_each output\: "
array1.my_each { |item| print item }
puts " "
print "each output\: "
array1.each { |item| print item }
puts " "

enum = str.enum_for(:each_byte)
puts enum.each { |b| print b }
puts ""
my_each = str.enum_for(:each_byte)
puts my_each.each { |b| print b }

# my_each_with_index
print "my_each_with_index output\: "
array1.my_each_with_index { |item| print item }
puts " "
print "each_with_index output\: "
array1.each_with_index { |item| print item }
puts " "

# my_select
print "my_select output\: "
print array1.my_select { |item| item > 2 }
puts " "
print "select output\: "
print array1.select { |item| item > 2 }
puts " "

# my_all?
print "my_all? output\: "
puts " "
print %w[ant bear cat].my_all? { |word| word.length >= 3 } #=> true
print " / "
print %w[ant bear cat].my_all? { |word| word.length >= 4 } #=> false
print " / "
print %w[ant bear cat].my_all?(/t/)                        #=> false
print " / "
print [1, 2i, 3.14].my_all?(Numeric)                       #=> true
print " / "
print [nil, true, 99].my_all?                              #=> false
print " / "
print [].my_all?                                           #=> true
puts " "

print "all? output\: "
puts " "
print %w[ant bear cat].all? { |word| word.length >= 3 } #=> true
print " / "
print %w[ant bear cat].all? { |word| word.length >= 4 } #=> false
print " / "
print %w[ant bear cat].all?(/t/)                        #=> false
print " / "
print [1, 2i, 3.14].all?(Numeric)                       #=> true
print " / "
print [nil, true, 99].all?                              #=> false
print " / "
print [].all?                                           #=> true
puts " "
puts [1, 0, 2.1].my_all?(Integer)  #=> false
puts [1, 0, 2.1].my_all?(3)  #=> false

# my_any?
puts %w[ant bear cat].any? { |word| word.length >= 3 } #=> true
puts %w[ant bear cat].any? { |word| word.length >= 4 } #=> true
puts %w[ant bear cat].any?(/d/)                        #=> false
puts [nil, true, 99].any?(Integer)                     #=> true
puts [nil, true, 99].any?                              #=> true
puts [].any?                                           #=> false
puts " "
puts %w[ant bear cat].my_any? { |word| word.length >= 3 } #=> true
puts %w[ant bear cat].my_any? { |word| word.length >= 4 } #=> true
puts %w[ant bear cat].my_any?(/d/)                        #=> false
puts [nil, true, 99].my_any?(Integer)                     #=> true
puts [nil, true, 99].my_any?                              #=> true
puts [].my_any?                                           #=> false
puts %w[dog door rod blade].my_any? 'cat'

# my_none?
puts %w{ant bear cat}.none? { |word| word.length == 5 } #=> true
puts %w{ant bear cat}.none? { |word| word.length >= 4 } #=> false
puts %w{ant bear cat}.none?(/d/)                        #=> true
puts [1, 3.14, 42].none?(Float)                         #=> false
puts [].none?                                           #=> true
puts [nil].none?                                        #=> true
puts [nil, false].none?                                 #=> true
puts [nil, false, true].none?                           #=> false
puts ""
puts %w{ant bear cat}.my_none? { |word| word.length == 5 } #=> true
puts %w{ant bear cat}.my_none? { |word| word.length >= 4 } #=> false
puts %w{ant bear cat}.my_none?(/d/)                        #=> true
puts [1, 3.14, 42].my_none?(Float)                         #=> false
puts [].my_none?                                           #=> true
puts [nil].my_none?                                        #=> true
puts [nil, false].my_none?                                 #=> true
puts [nil, false, true].my_none?                           #=> false

# my_count
ary = [1, 2, 4, 2]
puts ary.count               #=> 4
puts ary.count(2)            #=> 2
puts ary.count{ |x| x%2==0 } #=> 3

puts ""
puts ary.my_count               #=> 4
puts ary.my_count(2)            #=> 2
puts ary.my_count{ |x| x%2==0 } #=> 3

# my_map
print "my_map output\:"
print array1.my_map { |x| x * x }
print " / "
print array1.my_map(&testproc)
puts " "

print "map output\:"
print array1.map { |x| x * x }
print " / "
print array1.map(&testproc)
puts " "

# my_inject
puts (5..10).inject { |sum, n| sum + n }            #=> 45

puts (5..10).inject(1) { |product, n| product * n } #=> 151200

longest = %w{ cat sheep bear }.inject do |memo, word|
   memo.length > word.length ? memo : word
end
puts longest                                        #=> "sheep"
puts""
puts (5..10).my_inject { |sum, n| sum + n }            #=> 45

puts (5..10).my_inject(1) { |product, n| product * n } #=> 151200

longest = %w{ cat sheep bear }.my_inject do |memo, word|
   memo.length > word.length ? memo : word
end
puts longest                                        #=> "sheep"

puts""


puts (5..10).my_inject1 { |sum, n| sum + n }            #=> 45

puts (5..10).my_inject1(1) { |product, n| product * n } #=> 151200

longest = %w{ cat sheep bear }.my_inject1 do |memo, word|
   memo.length > word.length ? memo : word
end
puts longest                                        #=> "sheep"
puts""

array = [4,7,8,89,9,6,5,12,4,2,5]
operation = proc { |sum, n| sum + n  }
p array.my_inject(&operation)
p array.inject(&operation) # false

 array = [1,7,8,89,9,6,5,12,4,2,5]
p array.my_inject(:+) 
p array.inject(:+) 

print "multiply_els output\:"
print multiply_els([2,4,5])
puts " "

#=end